import React, { useEffect, useState } from 'react';
import ApiService from '../services/ApiService';
import { Container, Card, Button, Alert, Modal, Form } from 'react-bootstrap';
import { jwtDecode } from 'jwt-decode';  
 // To decode token

const NotificationsPage = () => {
  const [notifications, setNotifications] = useState([]);
  const [message, setMessage] = useState({ type: '', text: '' });
  const [showModal, setShowModal] = useState(false);
  const [newNotification, setNewNotification] = useState({
    userId: '',
    eventID: '',
    message: '',
  });

  const token = localStorage.getItem('token');
  const userRole = token 
    ? jwtDecode(token)['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] 
    : null;

  // Fetch Notifications
  useEffect(() => {
    const fetchNotifications = async () => {
      const response = await ApiService.getNotifications();
      if (response.success) {
        setNotifications(response.data);
      } else {
        setMessage({ type: 'danger', text: 'Failed to fetch notifications.' });
      }
    };
    fetchNotifications();
  }, []);

  // Handle Add Notification
  const handleAddNotification = async (e) => {
    e.preventDefault();

    const formattedNotification = {
      notificationID: 0, // Auto-generated by backend
      userId: Number(newNotification.userId),
      eventID: Number(newNotification.eventID),
      message: newNotification.message,
      sentAt: new Date().toISOString() // Auto-generate timestamp
    };

    const response = await ApiService.createNotification(formattedNotification);

    if (response.success) {
      setMessage({ type: 'success', text: 'Notification added successfully!' });

      // Refetch notifications to get the updated data
      const updatedNotifications = await ApiService.getNotifications();
      if (updatedNotifications.success) {
        setNotifications(updatedNotifications.data);
      }

      setShowModal(false);
      setNewNotification({ userId: '', eventID: '', message: '' });
    } else {
      setMessage({ type: 'danger', text: 'Failed to add notification.' });
    }
  };

  return (
    <Container>
      <h1 className="text-center my-4">Notifications</h1>

      {/* Display Success/Failure Messages */}
      {message.text && (
        <Alert variant={message.type} className="text-center">
          {message.text}
        </Alert>
      )}

      {/* Display Notifications */}
      {notifications.length > 0 ? (
        notifications.map((notification) => (
          <Card key={notification.notificationID} className="mb-3 p-3 shadow-sm">
            <h4>{notification.message}</h4>
            <p><strong>Sent At:</strong> {new Date(notification.sentAt).toLocaleString()}</p>
          </Card>
        ))
      ) : (
        <p className="text-center">No notifications available.</p>
      )}

      {/* Add Notification Button (Visible only for Admins) */}
      {userRole === 'Admin' && (
        <Button variant="primary" className="mt-3" onClick={() => setShowModal(true)}>
          Add Notification
        </Button>
      )}

      {/* Add Notification Modal */}
      <Modal show={showModal} onHide={() => setShowModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Add Notification</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleAddNotification}>
            <Form.Group className="mb-3">
              <Form.Label>User ID</Form.Label>
              <Form.Control
                type="number"
                value={newNotification.userId}
                onChange={(e) =>
                  setNewNotification({ ...newNotification, userId: e.target.value })
                }
                required
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Event ID</Form.Label>
              <Form.Control
                type="number"
                value={newNotification.eventID}
                onChange={(e) =>
                  setNewNotification({ ...newNotification, eventID: e.target.value })
                }
                required
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Message</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={newNotification.message}
                onChange={(e) =>
                  setNewNotification({ ...newNotification, message: e.target.value })
                }
                required
              />
            </Form.Group>

            <Button type="submit" variant="success">
              Add Notification
            </Button>
          </Form>
        </Modal.Body>
      </Modal>
    </Container>
  );
};

export default NotificationsPage;
